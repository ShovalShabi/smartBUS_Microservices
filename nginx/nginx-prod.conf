worker_processes 1;  # Number of worker processes to handle connections. Can be adjusted for higher CPU cores.

events {
    worker_connections 1024;  # Maximum number of connections each worker can handle. Increase for high traffic.
}

http {
    include       mime.types;  # Load standard MIME types for proper Content-Type handling.
    default_type  application/octet-stream;  # Default MIME type for unknown file types.

    # WebSocket support
    map $http_upgrade $connection_upgrade {
        default upgrade;  # If the request has 'Upgrade' header, treat it as a WebSocket connection.
        ''      close;    # If no 'Upgrade' header, close the connection.
    }

    # Define upstreams for each service (production environment)
    upstream auth-backend {
        server auth-prod:10000;  # Auth service production backend running on port 10000.
    }

    upstream feedback-backend {
        server feedback-prod:10050;  # Feedback service production backend running on port 10050.
    }

    upstream orderbus-backend {
        server orderbus-prod:10093;  # OrderBus service production backend running on port 10093.
    }

    upstream routes-backend {
        server routes-prod:10094;  # Routes service production backend running on port 10094.
    }

    server {
        listen 8080;  # Listen for incoming HTTP/HTTPS traffic on port 8080.
        server_name localhost;  # Server name. This could be changed to a domain name in production.
        http2 on;  # Enable HTTP/2 for faster, more efficient connections.

        # Proxy settings for backend services
        proxy_http_version 1.1;  # Use HTTP/1.1 to support keep-alive and WebSockets.
        proxy_set_header Upgrade $http_upgrade;  # Enable WebSocket upgrades.
        proxy_set_header Connection $connection_upgrade;  # Maintain WebSocket connection or close as needed.
        proxy_cache_bypass $http_upgrade;  # Disable caching for WebSocket connections.

        # Enable DNS resolution for upstream services
        resolver 8.8.8.8 8.8.4.4 valid=300s;  # Use Google's DNS servers, with a 5-minute cache for resolved names.
        resolver_timeout 10s;  # Set the timeout for DNS resolution to 10 seconds.

        # Route to Auth Service (Production) with /auth-service prefix
        location /auth-service/ {
            rewrite ^/auth-service/(.*)$ /$1 break;  # Strip /auth-service prefix before proxying to backend.
            proxy_pass http://auth-backend;  # Forward requests to the auth-backend production server.
        }

        # Route to Feedback Service (Production) with /feedback-service prefix
        location /feedback-service/ {
            rewrite ^/feedback-service/(.*)$ /$1 break;  # Strip /feedback-service prefix before proxying to backend.
            proxy_pass http://feedback-backend;  # Forward requests to the feedback-backend production server.
        }

        # Route to OrderBus Service (Production) with /orderbus-service prefix
        location /orderbus-service/ {
            rewrite ^/orderbus-service/(.*)$ /$1 break;  # Strip /orderbus-service prefix before proxying to backend.
            proxy_pass http://orderbus-backend;  # Forward requests to the orderbus-backend production server.
        }

        # Route to Routes Service (Production) with /routes-service prefix
        location /routes-service/ {
            rewrite ^/routes-service/(.*)$ /$1 break;  # Strip /routes-service prefix before proxying to backend.
            proxy_pass http://routes-backend;  # Forward requests to the routes-backend production server.
        }

        # WebSocket endpoint for OrderBus notifications
        location /notification-service {
            proxy_pass http://orderbus-backend;  # Direct WebSocket traffic to OrderBus backend.
            proxy_set_header Upgrade $http_upgrade;  # Allow WebSocket upgrade.
            proxy_set_header Connection "upgrade";  # Keep the WebSocket connection alive.
            proxy_set_header Host $host;  # Set the 'Host' header to the original client's hostname.
            proxy_set_header X-Real-IP $remote_addr;  # Forward the client's real IP to the backend.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Keep a record of client IPs in X-Forwarded-For header.
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the original scheme (http or https) to the backend.
            proxy_http_version 1.1;  # Maintain WebSocket connection via HTTP/1.1.
            proxy_cache_bypass $http_upgrade;  # Disable caching for WebSocket traffic.

            # Additional WebSocket-specific settings
            proxy_redirect off;  # Disable any automatic redirection for WebSocket connections.
        }
    }
}
